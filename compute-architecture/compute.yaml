AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This template will deploy compute component

Parameters:
  VpcIdParameter:
    Type: String
  # This parameter displays the sub-networks enabled by aws in specific zones
  SubnetId1Parameter:
    Type: AWS::EC2::Subnet::Id
    Description: "us-east-2a (use2-az1)"
  SubnetId2Parameter:
    Type: AWS::EC2::Subnet::Id
    Description: "us-east-2b (use2-az2)"
  ImageIdParameter:
    Type: String
  KeyNameParameter:
    Type: String
  SubsParameter:
    Type: String
  InstanceTypesParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
    Description: You can choose between t2.micro and t3.micro if you don't specify anyone t2.micro will be a instance default


Resources:
  SecurityGroupHtpp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP connection from all origins
      GroupName: SecurityGroupAlb
      VpcId:
        Ref: VpcIdParameter
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  SecurityGroupHtppSsh:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SHH AND HTTP conection to ASG from All Origin, proximaly just from ALB
      GroupName: SecurityGroupAsg
      VpcId:
        Ref: VpcIdParameter
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

  AlbScableApp:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: Alb-Scable-App
      Scheme: internet-facing
      SecurityGroups: 
        - Ref: SecurityGroupHtpp
      Subnets: 
        - Ref: SubnetId1Parameter
        - Ref: SubnetId2Parameter
      Type: application

  ListenerAlbScableApp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn:
        Ref: AlbScableApp
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroupAlbScableApp

  TargetGroupAlbScableApp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Name: target-group-scable-app
      Protocol: HTTP
      Port: 80
      ProtocolVersion: HTTP1
      IpAddressType: ipv4
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      VpcId:
        Ref: VpcIdParameter

  RoleAsg:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AsgRoleS3
      # Uso de polÃ­tica administrada
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      # De tener alguna politica personalizada se establece en la propiedad policies
      AssumeRolePolicyDocument:
      # Se establece que recurso asumira el rol
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: '/'
        Roles:
        # Es el instance profile que hace referencia al rol
        - Ref: RoleAsg

  LaunchTemplateScableApp:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      # Nommbre dinamico parcial
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId:
          Ref: ImageIdParameter
        InstanceType:
          Ref: InstanceTypesParameter
        KeyName:
          Ref: KeyNameParameter
        SecurityGroupIds:
          - Ref: SecurityGroupHtppSsh
        IamInstanceProfile:
          # En el launch template es donde se hace referencia al instance profile
          Name:
            Ref: InstanceProfile
        UserData:
          # Es necesario pasar el script a la funcion base64 para que haga la conversion y cloudformation pueda leer dicho script
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            yum install -y aws-cli
            echo "Hola Mundo" > /var/www/html/index.html
            systemctl restart httpd

     
  AsgScableApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      AvailabilityZones: 
        - us-east-2a
        - us-east-2b
      Cooldown: 300
      DesiredCapacity: 2
      MinSize: 1
      MaxSize: 3
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchTemplate: 
        LaunchTemplateId:
          Ref:  LaunchTemplateScableApp
        Version: !GetAtt LaunchTemplateScableApp.LatestVersionNumber
      MetricsCollection: 
        - Granularity: '1Minute' # Cada 1 minuto se enviaran metricas
          Metrics: [] # Incluir todas las metricas
      NotificationConfigurations:
        - TopicARN: !Ref MySNSTopic
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_TERMINATE

      TargetGroupARNs: 
        - Ref: TargetGroupAlbScableApp


  
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "Asg-event"
      

  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: 
        Ref: MySNSTopic
      Protocol: email
      Endpoint:
        Ref: SubsParameter
